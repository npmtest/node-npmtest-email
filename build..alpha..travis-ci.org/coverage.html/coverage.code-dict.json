{"/home/travis/build/npmtest/node-npmtest-email/test.js":"/* istanbul instrument in package npmtest_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email/lib.npmtest_email.js":"/* istanbul instrument in package npmtest_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_email = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_email = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-email/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-email && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_email */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_email\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_email.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_email.rollup.js'] =\n            local.assetsDict['/assets.npmtest_email.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_email.__dirname + '/lib.npmtest_email.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-email/node_modules/email/index.js":"\n// - node-email Copyright Aaron Heckmann <aaron.heckmann+github@gmail.com> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar spawn = require('child_process').spawn;\n\n/**\n * Generates a boundry string.\n * @return {String}\n */\n\nvar boundryidx = 0;\nfunction genBoundry () {\n  return 'part_' + Date.now() + \"_\" + boundryidx++;\n}\n\n/**\n * Email : Sends email using the sendmail command.\n *\n * Note: sendmail must be installed: see http://www.sendmail.org/\n *\n * @param {Object} config - optional configuration object\n *    - to {array|string} Email address(es) to which this msg will be sent\n *    - from {string} Email address from which this msg is sent. If not set\n *      defaults to the `exports.from` global setting.\n *    - replyTo {string} Email address to which replies will be sent. If not\n *      set defaults to `from`\n *    - cc {array|string} Email address(es) who receive a copy\n *    - bcc {array|string} Email address(es) who receive a blind copy\n *    - subject {string} The subject of the email\n *    - body {string} The message of the email\n *    - bodyType {string} Content type of body. Only valid option is\n *      'html' (for now). Defaults to text/plain.\n *    - altText {string} If `bodyType` is set to 'html', this will be sent\n *      as the alternative text.\n *    - timeout {number} Duration in milliseconds to wait before killing the\n *      process. If not set, defaults to `exports.timeout` global setting.\n *    - path {string} Optional path to the sendmail executable.\n *\n * Global settings\n *    - exports.timeout {number} Duration in milliseconds to wait before\n *      killing the process. Defaults to 3000. Used when `timeout` is not set\n *      on a message.\n *    - exports.from {string} Email address from which messages are sent. Used\n *      when `from` was not set on a message.\n *\n * Example:\n *    var Email = require('path/to/email').Email\n *    var myMsg = new Email(\n *    { from: 'me@example.com'\n *    , to:   'you@example.com'\n *    , subject: 'Knock knock...'\n *    , body: \"Who's there?\"\n *    })\n *    myMsg.send(function(err){\n *      ...\n *    })\n */\n\nfunction Email (config) {\n  config = config || {};\n\n  ; ['to'\n    ,'from'\n    ,'cc'\n    ,'bcc'\n    ,'replyTo'\n    ,'subject'\n    ,'body'\n    ,'bodyType'\n    ,'altText'\n    ,'timeout' ].forEach(function (key) {\n    this[key] = config[key];\n  }, this);\n\n  this.path = config.path || \"sendmail\";\n}\n\n\nEmail.prototype = {\n\n  send: function (callback) {\n    if (!this.valid(callback)) return;\n    var sendmail = spawn(this.path, ['-i', '-t'], this.options);\n    sendmail.on('exit', function(code) {\n      var err = null;\n      if (code !== 0) {\n        err = new Error(\"Sendmail exited with code: \" + code);\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    });\n\n    sendmail.stdin.end(this.msg);\n  }\n\n, get options () {\n    return { timeout: this.timeout || exports.timeout };\n  }\n\n, get msg () {\n    var msg = new Msg()\n      , boundry = genBoundry()\n      , to = formatAddress(this.to)\n      , cc = formatAddress(this.cc)\n      , bcc = formatAddress(this.bcc)\n      , html = this.bodyType && 'html' === this.bodyType.toLowerCase()\n      , plaintext = !html ? this.body\n          : this.altText  ? this.altText\n          : '';\n\n    msg.line('To: ' + to);\n    msg.line('From: '+ (this.from || exports.from));\n    msg.line('Reply-To: ' + (this.replyTo || this.from || exports.from));\n    msg.line('Subject: '+ this.subject);\n\n    if (cc) msg.line('CC: ' + cc);\n\n    if (bcc) msg.line('BCC: ' + bcc);\n\n    msg.line('Mime-Version: 1.0');\n    msg.line('Content-Type: multipart/alternative; boundary=' + boundry);\n    msg.line();\n\n    if (plaintext) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/plain; charset=utf-8');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(plaintext);\n      msg.line();\n    }\n\n    if (html) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/html; charset=utf-8');\n      msg.line('Content-Transfer-Encoding: Base64');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(this.encodedBody);\n      msg.line();\n    }\n\n    return msg.toString();\n  }\n\n, get encodedBody () {\n    var encoded = (new Buffer(this.body)).toString('base64')\n      , len = encoded.length\n      , size = 100\n      , start = 0\n      , ret = ''\n      , chunk;\n\n    while (chunk = encoded.substring(start, start + size > len ? len : start + size)) {\n      ret += chunk + '\\n';\n      start += size;\n    }\n\n    return ret;\n  }\n\n, valid: function (callback) {\n    if (!requiredFieldsExist(this, callback)) return false;\n    if (!fieldsAreClean(this, callback)) return false;\n\n    var validatedHeaders = ['to','from','cc','bcc','replyTo']\n      , len = validatedHeaders.length\n      , self = this\n      , addresses\n      , addLen\n      , key;\n\n    while (len--) {\n      key = validatedHeaders[len];\n      if (self[key]) {\n        addresses = toArray(self[key]);\n        addLen = addresses.length;\n        while (addLen--) {\n          if (!isValidAddress(addresses[addLen])) {\n            return error(\"invalid email address : \" + addresses[addLen], callback);\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\n\n/**\n * Email message constructor.\n *\n * @return {Msg}\n */\n\nfunction Msg () {\n  this.lines = [];\n}\n\nMsg.prototype = {\n\n  line: function (text) {\n    this.lines.push(text || '');\n  }\n\n, toString: function () {\n    return this.lines.join('\\n').replace(/\"/g, '\\\\\"');\n  }\n}\n\n/**\n * Validation helpers.\n */\n\nvar cleanHeaders = ['to','from','cc','bcc','replyTo','subject']\n  , injectionrgx = new RegExp(cleanHeaders.join(':|') + ':|content\\-type:', 'i');\n\n/**\n * Determines if any email headers contain vulnerabilities.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction fieldsAreClean (email, callback) {\n  var len = cleanHeaders.length\n    , header\n    , vlen\n    , vals\n    , val;\n\n  while (len--) {\n    header = cleanHeaders[len];\n\n    if (!email[header]) {\n      continue;\n    }\n\n    vals = toArray(email[header]);\n    vlen = vals.length;\n\n    while (vlen--) {\n      val = vals[vlen];\n      if (val) {\n        if (injectionrgx.test(val) || ~val.indexOf(\"%0a\") || ~val.indexOf(\"%0d\")) {\n          return error(\"Header injection detected in [\" + header + \"]\", callback);\n        }\n        vals[vlen] = val.replace(/\\n|\\r/ig, '');\n      }\n    }\n\n    email[header] = 2 > vals.length\n      ? vals[0]\n      : vals;\n  }\n\n  return true;\n}\n\n/**\n * Determines if all required email fields exist.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction requiredFieldsExist (email, callback) {\n  if (!email.from && !exports.from) {\n    return error('from is required', callback);\n  }\n\n  if (!email.to) {\n    return error('to is required', callback);\n  }\n\n  if (!email.subject) {\n    return error('subject is required', callback);\n  }\n\n  return true;\n}\n\n/**\n * Error helper that throws if no callback is passed. Else\n * executes the callback passing the err as the first argument.\n *\n * @param {String} msg\n * @param {Function} callback\n * @return {Bool|undefined}\n */\n\nfunction error (msg, callback) {\n  var err = new Error('node-email error: ' + msg);\n\n  if (callback) {\n    callback(err);\n    return false;\n  }\n\n  throw err;\n}\n\n/**\n * Formats an array of addresses as a string.\n *\n * @param {Array|String} what\n * @return {String}\n */\n\nfunction formatAddress (what) {\n  return Array.isArray(what)\n    ? what.join(', ')\n    : what;\n}\n\n/**\n * Converts `what` to an array.\n *\n * @param {Mixed} what\n * @return {Array}\n */\n\nfunction toArray (what) {\n  return Array.isArray(what)\n    ? what\n    : [what];\n}\n\n/**\n * Email validation regexps.\n * @see http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n */\n\nvar emailrgx = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-zрф]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\n\nvar capturergx = /<([^>].*)>$/;\n\n/**\n * Determines if `rawAddress` is a valid email address.\n *\n * @param {String} rawAddress\n * @return {Bool}\n */\n\nfunction isValidAddress (rawAddress) {\n  // john smith <email@domain.com> | email@domain.com\n  var address = capturergx.exec(rawAddress);\n  return address && address[1]\n    ? emailrgx.test(address[1])\n    : emailrgx.test(rawAddress);\n}\n\n/**\n * Exports.\n */\n\nexports.Email = Email;\nexports.version = '0.2.4';\nexports.from = undefined;\nexports.timeout = 3000;\nexports.isValidAddress = isValidAddress;\n"}